generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  email         String         @unique(map: "User.email_unique")
  name          String?
  phoneNumber   String?
  telegram      String?
  instagram     String?
  role          String
  courses       Course[]
  subscriptions Subscription[] @relation("UserSubscriptions")
  subscribers   Subscription[] @relation("UserSubscribers")
  transactions  Transaction[]  @relation("UserTransactions")
  sales         Transaction[]  @relation("UserSales")
}

model Subscription {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  authorId  String
  courseId  String
  status    String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation("UserSubscriptions", fields: [userId], references: [id], onDelete: Cascade)
  author    User     @relation("UserSubscribers", fields: [authorId], references: [id], onDelete: Cascade)
}

model Course {
  id            String         @id @default(uuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  authorId      String
  name          String
  description   String
  price         Int
  image         String
  category      String
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  subscriptions Subscription[]
  transactions  Transaction[]
  chapters      Chapter[]
}

model Transaction {
  id                String    @id @default(uuid())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userId            String
  courseId          String
  authorId          String
  bankName          String
  bankAccountNumber String
  bankAccountName   String
  amount            Int
  datetime          DateTime?
  status            String
  notes             String?
  user              User      @relation("UserTransactions", fields: [userId], references: [id], onDelete: Cascade)
  author            User      @relation("UserSales", fields: [authorId], references: [id], onDelete: Cascade)
  course            Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Chapter {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseId  String
  name      String
  order     Int
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
}

model Lesson {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  chapterId   String
  name        String
  description String?
  video       String
  order       Int
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}
